# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sphinx
import sys

try:
    libpkgmanifest_docdir
except NameError:
    libpkgmanifest_docdir = os.path.abspath(".")

sys.path.insert(0, os.path.join(libpkgmanifest_docdir, "../bindings/python"))

# -- Project information -----------------------------------------------------

project = 'libpkgmanifest'
copyright = 'Contributors to the libpkgmanifest project.'
author = 'RPM Software Management <rpm-ecosystem@lists.rpm.org>'


# -- General configuration ---------------------------------------------------
# If your documentation needs a minimal Sphinx version, state it here.
# needs_sphinx = '4.1.2'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'breathe',
    'sphinx.ext.autodoc',
    @AUTOAPI_EXTENSION@
]
breathe_projects = {'libpkgmanifest': '@CMAKE_CURRENT_BINARY_DIR@/xml/'}
breathe_default_project = 'libpkgmanifest'

# Show undocumented members for both C++ and Python API docs
# breathe_default_members = ('members', 'undoc-members')
# autodoc_default_options = {
#     'undoc-members': True,
# }

# The autoapi config is only used doc/setup.py in readthedocs workflow (not by cmake)
autoapi_type = 'python'
autoapi_dirs = ['@CMAKE_CURRENT_BINARY_DIR@/../bindings/python3/libpkgmanifest']
autoapi_root = "api/python/autoapi"
autoapi_python_use_implicit_namespaces = True
# We don't want to automatically generate the full documentation.
# Instead we use directives, this allows greater control and both
# cpp and python docs can have the same look and layout.
autoapi_generate_api_docs = False
autoapi_add_toctree_entry = False
autoapi_add_objects_to_toctree = False

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
#html_theme = 'alabaster'
#html_theme = 'default'
html_theme = 'sphinx_rtd_theme'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']


rst_prolog = f"""
.. _libpkgmanifest: https://github.com/rpm-software-management/libpkgmanifest/
"""
